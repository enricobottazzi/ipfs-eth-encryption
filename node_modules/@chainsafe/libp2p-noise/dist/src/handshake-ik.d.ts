import type { PeerId } from '@libp2p/interfaces/peer-id';
import type { ProtobufStream } from 'it-pb-stream';
import type { NoiseSession } from './@types/handshake.js';
import type { bytes, bytes32 } from './@types/basic.js';
import type { KeyPair } from './@types/libp2p.js';
import type { IHandshake } from './@types/handshake-interface.js';
import type { ICryptoInterface } from './crypto.js';
import { IK } from './handshakes/ik.js';
export declare class IKHandshake implements IHandshake {
    isInitiator: boolean;
    session: NoiseSession;
    remotePeer: PeerId;
    remoteEarlyData: Uint8Array;
    private readonly payload;
    private readonly prologue;
    private readonly staticKeypair;
    private readonly connection;
    private readonly ik;
    constructor(isInitiator: boolean, payload: bytes, prologue: bytes32, crypto: ICryptoInterface, staticKeypair: KeyPair, connection: ProtobufStream, remoteStaticKey: bytes, remotePeer?: PeerId, handshake?: IK);
    stage0(): Promise<void>;
    stage1(): Promise<void>;
    decrypt(ciphertext: Uint8Array, session: NoiseSession): {
        plaintext: bytes;
        valid: boolean;
    };
    encrypt(plaintext: Uint8Array, session: NoiseSession): bytes;
    getLocalEphemeralKeys(): KeyPair;
    private getCS;
    private setRemoteEarlyData;
}
//# sourceMappingURL=handshake-ik.d.ts.map