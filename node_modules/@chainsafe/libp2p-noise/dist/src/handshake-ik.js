import { IK } from './handshakes/ik.js';
import { decode0, decode1, encode0, encode1 } from './encoder.js';
import { FailedIKError } from './errors.js';
import { logger, logLocalStaticKeys, logRemoteStaticKey, logLocalEphemeralKeys, logRemoteEphemeralKey, logCipherState } from './logger.js';
import { decodePayload, getPeerIdFromPayload, verifySignedPayload } from './utils.js';
export class IKHandshake {
    constructor(isInitiator, payload, prologue, crypto, staticKeypair, connection, remoteStaticKey, remotePeer, handshake) {
        this.isInitiator = isInitiator;
        this.payload = payload;
        this.prologue = prologue;
        this.staticKeypair = staticKeypair;
        this.connection = connection;
        if (remotePeer) {
            this.remotePeer = remotePeer;
        }
        this.ik = handshake ?? new IK(crypto);
        this.session = this.ik.initSession(this.isInitiator, this.prologue, this.staticKeypair, remoteStaticKey);
        this.remoteEarlyData = new Uint8Array();
    }
    async stage0() {
        logLocalStaticKeys(this.session.hs.s);
        logRemoteStaticKey(this.session.hs.rs);
        if (this.isInitiator) {
            logger('IK Stage 0 - Initiator sending message...');
            const messageBuffer = this.ik.sendMessage(this.session, this.payload);
            this.connection.writeLP(encode1(messageBuffer));
            logger('IK Stage 0 - Initiator sent message.');
            logLocalEphemeralKeys(this.session.hs.e);
        }
        else {
            logger('IK Stage 0 - Responder receiving message...');
            const receivedMsg = await this.connection.readLP();
            try {
                const receivedMessageBuffer = decode1(receivedMsg.slice());
                const { plaintext, valid } = this.ik.recvMessage(this.session, receivedMessageBuffer);
                if (!valid) {
                    throw new Error('ik handshake stage 0 decryption validation fail');
                }
                logger('IK Stage 0 - Responder got message, going to verify payload.');
                const decodedPayload = await decodePayload(plaintext);
                this.remotePeer = this.remotePeer || await getPeerIdFromPayload(decodedPayload);
                await verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);
                this.setRemoteEarlyData(decodedPayload.data);
                logger('IK Stage 0 - Responder successfully verified payload!');
                logRemoteEphemeralKey(this.session.hs.re);
            }
            catch (e) {
                const err = e;
                logger('Responder breaking up with IK handshake in stage 0.');
                throw new FailedIKError(receivedMsg, `Error occurred while verifying initiator's signed payload: ${err.message}`);
            }
        }
    }
    async stage1() {
        if (this.isInitiator) {
            logger('IK Stage 1 - Initiator receiving message...');
            const receivedMsg = (await this.connection.readLP()).slice();
            const receivedMessageBuffer = decode0(receivedMsg);
            const { plaintext, valid } = this.ik.recvMessage(this.session, receivedMessageBuffer);
            logger('IK Stage 1 - Initiator got message, going to verify payload.');
            try {
                if (!valid) {
                    throw new Error('ik stage 1 decryption validation fail');
                }
                const decodedPayload = await decodePayload(plaintext);
                this.remotePeer = this.remotePeer || await getPeerIdFromPayload(decodedPayload);
                await verifySignedPayload(receivedMessageBuffer.ns.slice(0, 32), decodedPayload, this.remotePeer);
                this.setRemoteEarlyData(decodedPayload.data);
                logger('IK Stage 1 - Initiator successfully verified payload!');
                logRemoteEphemeralKey(this.session.hs.re);
            }
            catch (e) {
                const err = e;
                logger('Initiator breaking up with IK handshake in stage 1.');
                throw new FailedIKError(receivedMsg, `Error occurred while verifying responder's signed payload: ${err.message}`);
            }
        }
        else {
            logger('IK Stage 1 - Responder sending message...');
            const messageBuffer = this.ik.sendMessage(this.session, this.payload);
            this.connection.writeLP(encode0(messageBuffer));
            logger('IK Stage 1 - Responder sent message...');
            logLocalEphemeralKeys(this.session.hs.e);
        }
        logCipherState(this.session);
    }
    decrypt(ciphertext, session) {
        const cs = this.getCS(session, false);
        return this.ik.decryptWithAd(cs, new Uint8Array(0), ciphertext);
    }
    encrypt(plaintext, session) {
        const cs = this.getCS(session);
        return this.ik.encryptWithAd(cs, new Uint8Array(0), plaintext);
    }
    getLocalEphemeralKeys() {
        if (!this.session.hs.e) {
            throw new Error('Ephemeral keys do not exist.');
        }
        return this.session.hs.e;
    }
    getCS(session, encryption = true) {
        if (!session.cs1 || !session.cs2) {
            throw new Error('Handshake not completed properly, cipher state does not exist.');
        }
        if (this.isInitiator) {
            return encryption ? session.cs1 : session.cs2;
        }
        else {
            return encryption ? session.cs2 : session.cs1;
        }
    }
    setRemoteEarlyData(data) {
        if (data) {
            this.remoteEarlyData = data;
        }
    }
}
//# sourceMappingURL=handshake-ik.js.map