import type { PeerId } from '@libp2p/interfaces/peer-id';
import type { ProtobufStream } from 'it-pb-stream';
import type { bytes, bytes32 } from './@types/basic.js';
import type { KeyPair } from './@types/libp2p.js';
import { XXHandshake } from './handshake-xx.js';
import type { XX } from './handshakes/xx.js';
import type { ICryptoInterface } from './crypto.js';
export declare class XXFallbackHandshake extends XXHandshake {
    private readonly ephemeralKeys?;
    private readonly initialMsg;
    constructor(isInitiator: boolean, payload: bytes, prologue: bytes32, crypto: ICryptoInterface, staticKeypair: KeyPair, connection: ProtobufStream, initialMsg: bytes, remotePeer?: PeerId, ephemeralKeys?: KeyPair, handshake?: XX);
    propose(): Promise<void>;
    exchange(): Promise<void>;
}
//# sourceMappingURL=handshake-xx-fallback.d.ts.map