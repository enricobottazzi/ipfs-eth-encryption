import { EventEmitter } from '@libp2p/interfaces/events';
import type { PeerDiscovery, PeerDiscoveryEvents } from '@libp2p/interfaces/peer-discovery';
import { symbol } from '@libp2p/interfaces/peer-discovery';
export interface BootstrapOptions {
    /**
     * The list of peer addresses in multi-address format
     */
    list: string[];
    /**
     * The interval between emitting addresses in milliseconds
     */
    interval?: number;
}
/**
 * Emits 'peer' events on a regular interval for each peer in the provided list.
 */
export declare class Bootstrap extends EventEmitter<PeerDiscoveryEvents> implements PeerDiscovery {
    static tag: string;
    private timer?;
    private readonly list;
    private readonly interval;
    constructor(options?: BootstrapOptions);
    get [symbol](): true;
    get [Symbol.toStringTag](): string;
    isStarted(): boolean;
    /**
     * Start emitting events
     */
    start(): void;
    /**
     * Emit each address in the list as a PeerInfo
     */
    _discoverBootstrapPeers(): void;
    /**
     * Stop emitting events
     */
    stop(): void;
}
//# sourceMappingURL=index.d.ts.map