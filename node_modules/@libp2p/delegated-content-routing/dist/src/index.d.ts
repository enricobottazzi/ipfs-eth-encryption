import type { IPFSHTTPClient, CID, HTTPClientExtraOptions } from 'ipfs-http-client';
import type { AbortOptions } from 'ipfs-core-types/src/utils';
import type { ContentRouting } from '@libp2p/interfaces/content-routing';
import type { PeerInfo } from '@libp2p/interfaces/peer-info';
import type { Startable } from '@libp2p/interfaces/startable';
/**
 * An implementation of content routing, using a delegated peer
 */
export declare class DelegatedContentRouting implements ContentRouting, Startable {
    private readonly client;
    private readonly httpQueue;
    private readonly httpQueueRefs;
    private started;
    private abortController;
    /**
     * Create a new DelegatedContentRouting instance
     */
    constructor(client: IPFSHTTPClient);
    isStarted(): boolean;
    start(): void;
    stop(): void;
    /**
     * Search the dht for providers of the given CID.
     *
     * - call `findProviders` on the delegated node.
     */
    findProviders(key: CID, options?: HTTPClientExtraOptions & AbortOptions): AsyncGenerator<PeerInfo, void, undefined>;
    /**
     * Announce to the network that the delegated node can provide the given key.
     *
     * Currently this uses the following hack
     * - delegate is one of bootstrap nodes, so we are always connected to it
     * - call block stat on the delegated node, so it fetches the content
     * - call dht provide with the passed cid
     *
     * N.B. this must be called for every block in the dag you want provided otherwise
     * the delegate will only be able to supply the root block of the dag when asked
     * for the data by an interested peer.
     */
    provide(key: CID, options?: HTTPClientExtraOptions & AbortOptions): Promise<void>;
    /**
     * Stores a value in the backing key/value store of the delegated content router.
     * This may fail if the delegated node's content routing implementation does not
     * use a key/value store, or if the delegated operation fails.
     */
    put(key: Uint8Array, value: Uint8Array, options?: HTTPClientExtraOptions & AbortOptions): Promise<void>;
    /**
     * Fetches an value from the backing key/value store of the delegated content router.
     * This may fail if the delegated node's content routing implementation does not
     * use a key/value store, or if the delegated operation fails.
     */
    get(key: Uint8Array, options?: HTTPClientExtraOptions & AbortOptions): Promise<Uint8Array>;
}
//# sourceMappingURL=index.d.ts.map