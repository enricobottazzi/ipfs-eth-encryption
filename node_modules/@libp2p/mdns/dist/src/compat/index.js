// Compatibility with Go libp2p MDNS
import { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';
import { Responder } from './responder.js';
import { Querier } from './querier.js';
import { symbol } from '@libp2p/interfaces/peer-discovery';
export class GoMulticastDNS extends EventEmitter {
    constructor(options = {}) {
        super();
        const { queryPeriod, queryInterval } = options;
        this._started = false;
        this._responder = new Responder();
        this._querier = new Querier({
            queryInterval,
            queryPeriod
        });
        this._querier.addEventListener('peer', (evt) => {
            this.dispatchEvent(new CustomEvent('peer', { detail: evt.detail }));
        });
    }
    get [symbol]() {
        return true;
    }
    get [Symbol.toStringTag]() {
        return '@libp2p/go-mdns';
    }
    init(components) {
        this._responder.init(components);
        this._querier.init(components);
    }
    isStarted() {
        return this._started;
    }
    async start() {
        if (this.isStarted()) {
            return;
        }
        this._started = true;
        await Promise.all([
            this._responder.start(),
            this._querier.start()
        ]);
    }
    async stop() {
        if (!this.isStarted()) {
            return;
        }
        this._started = false;
        await Promise.all([
            this._responder.stop(),
            this._querier.stop()
        ]);
    }
}
//# sourceMappingURL=index.js.map