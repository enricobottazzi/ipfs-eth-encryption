/// <reference types="node" />
import { EventEmitter } from '@libp2p/interfaces/events';
import type { PeerDiscovery, PeerDiscoveryEvents } from '@libp2p/interfaces/peer-discovery';
import type { ResponsePacket } from 'multicast-dns';
import type { RemoteInfo } from 'dgram';
import { Components, Initializable } from '@libp2p/interfaces/components';
import { symbol } from '@libp2p/interfaces/peer-discovery';
export interface QuerierInit {
    queryInterval?: number;
    queryPeriod?: number;
}
export interface Handle {
    stop: () => Promise<void>;
}
export declare class Querier extends EventEmitter<PeerDiscoveryEvents> implements PeerDiscovery, Initializable {
    private readonly _init;
    private _handle?;
    private components;
    constructor(init?: QuerierInit);
    get [symbol](): true;
    get [Symbol.toStringTag](): string;
    init(components: Components): void;
    isStarted(): boolean;
    start(): void;
    _onResponse(event: ResponsePacket, info: RemoteInfo): void;
    stop(): Promise<void>;
}
//# sourceMappingURL=querier.d.ts.map