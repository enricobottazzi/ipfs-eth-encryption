import OS from 'os';
import MDNS from 'multicast-dns';
import { logger } from '@libp2p/logger';
import { SERVICE_TAG_LOCAL } from './constants.js';
import { protocols } from '@multiformats/multiaddr';
import { Components } from '@libp2p/interfaces/components';
const log = logger('libp2p:mdns:compat:responder');
export class Responder {
    constructor() {
        this.components = new Components();
        this._onQuery = this._onQuery.bind(this);
    }
    init(components) {
        this.components = components;
    }
    start() {
        this._mdns = MDNS();
        this._mdns.on('query', this._onQuery);
    }
    _onQuery(event, info) {
        const addresses = this.components.getAddressManager().getAddresses().reduce((acc, addr) => {
            addr = addr.decapsulateCode(protocols('p2p').code);
            if (addr.isThinWaistAddress()) {
                acc.push(addr.toOptions());
            }
            return acc;
        }, []);
        // Only announce TCP for now
        if (addresses.length === 0) {
            log('no tcp addresses configured so cannot respond to mDNS query');
            return;
        }
        const questions = event.questions ?? [];
        // Only respond to queries for our service tag
        if (!questions.some(q => q.name === SERVICE_TAG_LOCAL))
            return;
        log.trace('got query', event, info);
        const answers = [];
        const peerServiceTagLocal = `${this.components.getPeerId().toString()}.${SERVICE_TAG_LOCAL}`;
        answers.push({
            name: SERVICE_TAG_LOCAL,
            type: 'PTR',
            class: 'IN',
            ttl: 120,
            data: peerServiceTagLocal
        });
        answers.push({
            name: peerServiceTagLocal,
            type: 'TXT',
            class: 'IN',
            ttl: 120,
            data: [Buffer.from(this.components.getPeerId().toString())]
        });
        addresses.forEach(ma => {
            if (![4, 6].includes(ma.family)) {
                return;
            }
            answers.push({
                name: peerServiceTagLocal,
                type: 'SRV',
                class: 'IN',
                ttl: 120,
                data: {
                    priority: 10,
                    weight: 1,
                    port: ma.port,
                    target: OS.hostname()
                }
            });
            answers.push({
                name: OS.hostname(),
                type: ma.family === 4 ? 'A' : 'AAAA',
                class: 'IN',
                ttl: 120,
                data: ma.host
            });
        });
        if (this._mdns != null) {
            log.trace('responding to query');
            log.trace('query answers', answers);
            this._mdns.respond(answers, info);
        }
    }
    stop() {
        if (this._mdns != null) {
            this._mdns.removeListener('query', this._onQuery);
            return new Promise(resolve => {
                if (this._mdns != null) {
                    this._mdns.destroy(resolve);
                }
                else {
                    resolve();
                }
            });
        }
    }
}
//# sourceMappingURL=responder.js.map