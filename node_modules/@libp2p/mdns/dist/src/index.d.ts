import multicastDNS from 'multicast-dns';
import { EventEmitter } from '@libp2p/interfaces/events';
import type { PeerDiscovery, PeerDiscoveryEvents } from '@libp2p/interfaces/peer-discovery';
import type { PeerInfo } from '@libp2p/interfaces/peer-info';
import { Components, Initializable } from '@libp2p/interfaces/components';
import { symbol } from '@libp2p/interfaces/peer-discovery';
export interface MulticastDNSOptions {
    broadcast?: boolean;
    interval?: number;
    serviceTag?: string;
    port?: number;
    compat?: boolean;
    compatQueryPeriod?: number;
    compatQueryInterval?: number;
}
export declare class MulticastDNS extends EventEmitter<PeerDiscoveryEvents> implements PeerDiscovery, Initializable {
    mdns?: multicastDNS.MulticastDNS;
    private readonly broadcast;
    private readonly interval;
    private readonly serviceTag;
    private readonly port;
    private _queryInterval;
    private readonly _goMdns?;
    private components;
    constructor(options?: MulticastDNSOptions);
    get [symbol](): true;
    get [Symbol.toStringTag](): string;
    init(components: Components): void;
    isStarted(): boolean;
    /**
     * Start sending queries to the LAN.
     *
     * @returns {void}
     */
    start(): Promise<void>;
    _onMdnsQuery(event: multicastDNS.QueryPacket): void;
    _onMdnsResponse(event: multicastDNS.ResponsePacket): void;
    _onPeer(evt: CustomEvent<PeerInfo>): void;
    /**
     * Stop sending queries to the LAN.
     *
     * @returns {Promise}
     */
    stop(): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map