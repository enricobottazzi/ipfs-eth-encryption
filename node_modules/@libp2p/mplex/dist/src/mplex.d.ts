import { Pushable } from 'it-pushable';
import { Message } from './message-types.js';
import type { Components } from '@libp2p/interfaces/components';
import type { Sink } from 'it-stream-types';
import type { StreamMuxer, StreamMuxerInit } from '@libp2p/interfaces/stream-muxer';
import type { Stream } from '@libp2p/interfaces/connection';
import type { MplexInit } from './index.js';
export interface MplexStream extends Stream {
    source: Pushable<Uint8Array>;
}
interface MplexStreamMuxerInit extends MplexInit, StreamMuxerInit {
}
export declare class MplexStreamMuxer implements StreamMuxer {
    protocol: string;
    sink: Sink<Uint8Array>;
    source: AsyncIterable<Uint8Array>;
    private _streamId;
    private readonly _streams;
    private readonly _init;
    private readonly _source;
    constructor(components: Components, init?: MplexStreamMuxerInit);
    init(components: Components): void;
    /**
     * Returns a Map of streams and their ids
     */
    get streams(): Stream[];
    /**
     * Initiate a new stream with the given name. If no name is
     * provided, the id of the stream will be used.
     */
    newStream(name?: string): Stream;
    /**
     * Called whenever an inbound stream is created
     */
    _newReceiverStream(options: {
        id: number;
        name: string;
    }): MplexStream;
    _newStream(options: {
        id: number;
        name: string;
        type: 'initiator' | 'receiver';
        registry: Map<number, MplexStream>;
    }): MplexStream;
    /**
     * Creates a sink with an abortable source. Incoming messages will
     * also have their size restricted. All messages will be varint decoded.
     */
    _createSink(): Sink<Uint8Array, Promise<void>>;
    /**
     * Creates a source that restricts outgoing message sizes
     * and varint encodes them
     */
    _createSource(): AsyncGenerator<Uint8Array, void, undefined> & {
        push: (value: Message) => import("it-pushable").PushableV<Message>;
        end: (err?: Error | undefined) => import("it-pushable").PushableV<Message>;
        return: () => {
            done: boolean;
        };
    };
    _handleIncoming(message: Message): void;
}
export {};
//# sourceMappingURL=mplex.d.ts.map