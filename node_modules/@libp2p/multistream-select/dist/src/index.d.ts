import { PROTOCOL_ID } from './constants.js';
import type { Duplex } from 'it-stream-types';
import type { AbortOptions } from '@libp2p/interfaces';
export { PROTOCOL_ID };
export interface ProtocolStream {
    stream: Duplex<Uint8Array>;
    protocol: string;
}
declare class MultistreamSelect {
    protected stream: Duplex<Uint8Array>;
    protected shaken: boolean;
    constructor(stream: Duplex<Uint8Array>);
    /**
     * Perform the multistream-select handshake
     *
     * @param {AbortOptions} [options]
     */
    _handshake(options?: AbortOptions): Promise<void>;
}
export declare class Dialer extends MultistreamSelect {
    select(protocols: string | string[], options?: AbortOptions): Promise<ProtocolStream>;
    ls(options?: AbortOptions): Promise<string[]>;
}
export declare class Listener extends MultistreamSelect {
    handle(protocols: string | string[], options?: AbortOptions): Promise<ProtocolStream>;
}
//# sourceMappingURL=index.d.ts.map