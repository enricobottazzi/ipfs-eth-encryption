import { select } from './select.js';
import { handle } from './handle.js';
import { ls } from './ls.js';
import { PROTOCOL_ID } from './constants.js';
export { PROTOCOL_ID };
class MultistreamSelect {
    constructor(stream) {
        this.stream = stream;
        this.shaken = false;
    }
    /**
     * Perform the multistream-select handshake
     *
     * @param {AbortOptions} [options]
     */
    async _handshake(options) {
        if (this.shaken) {
            return;
        }
        const { stream } = await select(this.stream, PROTOCOL_ID, undefined, options);
        this.stream = stream;
        this.shaken = true;
    }
}
export class Dialer extends MultistreamSelect {
    async select(protocols, options) {
        return await select(this.stream, protocols, this.shaken ? undefined : PROTOCOL_ID, options);
    }
    async ls(options) {
        await this._handshake(options);
        const res = await ls(this.stream, options);
        const { stream, protocols } = res;
        this.stream = stream;
        return protocols;
    }
}
export class Listener extends MultistreamSelect {
    async handle(protocols, options) {
        return await handle(this.stream, protocols, options);
    }
}
//# sourceMappingURL=index.js.map