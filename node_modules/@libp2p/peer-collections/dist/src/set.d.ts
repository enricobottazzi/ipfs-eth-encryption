import type { PeerId } from '@libp2p/interfaces/peer-id';
/**
 * We can't use PeerIds as set entries because set entries are
 * compared using same-value-zero equality, so this is just
 * a map that stringifies the PeerIds before storing them.
 *
 * PeerIds cache stringified versions of themselves so this
 * should be a cheap operation.
 */
export declare class PeerSet {
    private readonly set;
    constructor(set?: PeerSet | Iterable<PeerId>);
    get size(): number;
    [Symbol.iterator](): IterableIterator<PeerId>;
    add(peer: PeerId): void;
    clear(): void;
    delete(peer: PeerId): void;
    entries(): IterableIterator<[PeerId, PeerId]>;
    forEach(predicate: (peerId: PeerId, index: PeerId, set: PeerSet) => void): void;
    has(peer: PeerId): boolean;
    values(): IterableIterator<PeerId>;
}
//# sourceMappingURL=set.d.ts.map