import * as keysPBM from './keys.js';
import 'node-forge/lib/asn1.js';
import 'node-forge/lib/pbe.js';
import { keyStretcher } from './key-stretcher.js';
import generateEphemeralKeyPair from './ephemeral-keys.js';
import * as RSA from './rsa-class.js';
import * as Ed25519 from './ed25519-class.js';
import * as Secp256k1 from './secp256k1-class.js';
import type { PrivateKey, PublicKey } from '@libp2p/interface-keys';
export { keyStretcher };
export { generateEphemeralKeyPair };
export { keysPBM };
export declare type KeyTypes = 'RSA' | 'Ed25519' | 'secp256k1';
export declare const supportedKeys: {
    rsa: typeof RSA;
    ed25519: typeof Ed25519;
    secp256k1: typeof Secp256k1;
};
export declare function generateKeyPair(type: KeyTypes, bits?: number): Promise<PrivateKey>;
export declare function generateKeyPairFromSeed(type: KeyTypes, seed: Uint8Array, bits?: number): Promise<PrivateKey>;
export declare function unmarshalPublicKey(buf: Uint8Array): PublicKey;
export declare function marshalPublicKey(key: {
    bytes: Uint8Array;
}, type?: string): Uint8Array;
export declare function unmarshalPrivateKey(buf: Uint8Array): Promise<PrivateKey>;
export declare function marshalPrivateKey(key: {
    bytes: Uint8Array;
}, type?: string): Uint8Array;
/**
 *
 * @param {string} encryptedKey
 * @param {string} password
 */
export declare function importKey(encryptedKey: string, password: string): Promise<PrivateKey>;
//# sourceMappingURL=index.d.ts.map