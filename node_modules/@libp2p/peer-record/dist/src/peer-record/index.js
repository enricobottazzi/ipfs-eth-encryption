import { Multiaddr } from '@multiformats/multiaddr';
import { arrayEquals } from '@libp2p/utils/array-equals';
import { peerIdFromBytes } from '@libp2p/peer-id';
import { PeerRecord as Protobuf } from './peer-record.js';
import { ENVELOPE_DOMAIN_PEER_RECORD, ENVELOPE_PAYLOAD_TYPE_PEER_RECORD } from './consts.js';
/**
 * The PeerRecord is used for distributing peer routing records across the network.
 * It contains the peer's reachable listen addresses.
 */
export class PeerRecord {
    constructor(init) {
        this.domain = PeerRecord.DOMAIN;
        this.codec = PeerRecord.CODEC;
        const { peerId, multiaddrs, seqNumber } = init;
        this.peerId = peerId;
        this.multiaddrs = multiaddrs ?? [];
        this.seqNumber = seqNumber ?? BigInt(Date.now());
    }
    /**
     * Marshal a record to be used in an envelope
     */
    marshal() {
        if (this.marshaled == null) {
            this.marshaled = Protobuf.encode({
                peerId: this.peerId.toBytes(),
                seq: BigInt(this.seqNumber),
                addresses: this.multiaddrs.map((m) => ({
                    multiaddr: m.bytes
                }))
            });
        }
        return this.marshaled;
    }
    /**
     * Returns true if `this` record equals the `other`
     */
    equals(other) {
        if (!(other instanceof PeerRecord)) {
            return false;
        }
        // Validate PeerId
        if (!this.peerId.equals(other.peerId)) {
            return false;
        }
        // Validate seqNumber
        if (this.seqNumber !== other.seqNumber) {
            return false;
        }
        // Validate multiaddrs
        if (!arrayEquals(this.multiaddrs, other.multiaddrs)) {
            return false;
        }
        return true;
    }
}
/**
 * Unmarshal Peer Record Protobuf
 */
PeerRecord.createFromProtobuf = (buf) => {
    const peerRecord = Protobuf.decode(buf);
    const peerId = peerIdFromBytes(peerRecord.peerId);
    const multiaddrs = (peerRecord.addresses ?? []).map((a) => new Multiaddr(a.multiaddr));
    const seqNumber = peerRecord.seq;
    return new PeerRecord({ peerId, multiaddrs, seqNumber });
};
PeerRecord.DOMAIN = ENVELOPE_DOMAIN_PEER_RECORD;
PeerRecord.CODEC = ENVELOPE_PAYLOAD_TYPE_PEER_RECORD;
//# sourceMappingURL=index.js.map