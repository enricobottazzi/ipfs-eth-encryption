import { Multiaddr } from '@multiformats/multiaddr';
import { RecordEnvelope } from '@libp2p/peer-record';
import type { AddressFilter, PeerStore } from '@libp2p/interfaces/peer-store';
import type { Store } from './store.js';
import type { Envelope } from '@libp2p/interfaces/record';
import type { PeerId } from '@libp2p/interfaces/peer-id';
export declare class PeerStoreAddressBook {
    private readonly dispatchEvent;
    private readonly store;
    private readonly addressFilter;
    constructor(dispatchEvent: PeerStore['dispatchEvent'], store: Store, addressFilter?: AddressFilter);
    /**
     * ConsumePeerRecord adds addresses from a signed peer record contained in a record envelope.
     * This will return a boolean that indicates if the record was successfully processed and added
     * into the AddressBook.
     */
    consumePeerRecord(envelope: Envelope): Promise<boolean>;
    getRawEnvelope(peerId: PeerId): Promise<Uint8Array | undefined>;
    /**
     * Get an Envelope containing a PeerRecord for the given peer.
     * Returns undefined if no record exists.
     */
    getPeerRecord(peerId: PeerId): Promise<RecordEnvelope | undefined>;
    get(peerId: PeerId): Promise<import("@libp2p/interfaces/peer-store").Address[]>;
    set(peerId: PeerId, multiaddrs: Multiaddr[]): Promise<void>;
    add(peerId: PeerId, multiaddrs: Multiaddr[]): Promise<void>;
    delete(peerId: PeerId): Promise<void>;
}
//# sourceMappingURL=address-book.d.ts.map