import { EventEmitter } from '@libp2p/interfaces/events';
import type { PeerStore, AddressBook, KeyBook, MetadataBook, ProtoBook, PeerStoreEvents, PeerStoreInit, Peer } from '@libp2p/interfaces/peer-store';
import type { PeerId } from '@libp2p/interfaces/peer-id';
import { Components, Initializable } from '@libp2p/interfaces/components';
/**
 * An implementation of PeerStore that stores data in a Datastore
 */
export declare class PersistentPeerStore extends EventEmitter<PeerStoreEvents> implements PeerStore, Initializable {
    addressBook: AddressBook;
    keyBook: KeyBook;
    metadataBook: MetadataBook;
    protoBook: ProtoBook;
    private components;
    private readonly store;
    constructor(init?: PeerStoreInit);
    init(components: Components): void;
    forEach(fn: (peer: Peer) => void): Promise<void>;
    all(): Promise<Peer[]>;
    /**
     * Delete the information of the given peer in every book
     */
    delete(peerId: PeerId): Promise<void>;
    /**
     * Get the stored information of a given peer
     */
    get(peerId: PeerId): Promise<Peer>;
    /**
     * Returns true if we have a record of the peer
     */
    has(peerId: PeerId): Promise<boolean>;
}
//# sourceMappingURL=index.d.ts.map