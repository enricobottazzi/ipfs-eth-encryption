import type { Store } from './store.js';
import type { PeerStore, MetadataBook } from '@libp2p/interfaces/peer-store';
import type { PeerId } from '@libp2p/interfaces/peer-id';
export declare class PeerStoreMetadataBook implements MetadataBook {
    private readonly dispatchEvent;
    private readonly store;
    /**
     * The MetadataBook is responsible for keeping metadata
     * about known peers
     */
    constructor(dispatchEvent: PeerStore['dispatchEvent'], store: Store);
    /**
     * Get the known data of a provided peer
     */
    get(peerId: PeerId): Promise<Map<any, any>>;
    /**
     * Get specific metadata value, if it exists
     */
    getValue(peerId: PeerId, key: string): Promise<Uint8Array | undefined>;
    set(peerId: PeerId, metadata: Map<string, Uint8Array>): Promise<void>;
    /**
     * Set metadata key and value of a provided peer
     */
    setValue(peerId: PeerId, key: string, value: Uint8Array): Promise<void>;
    delete(peerId: PeerId): Promise<void>;
    deleteValue(peerId: PeerId, key: string): Promise<void>;
}
//# sourceMappingURL=metadata-book.d.ts.map