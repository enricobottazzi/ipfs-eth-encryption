/* eslint-disable import/export */
/* eslint-disable @typescript-eslint/no-namespace */
import { encodeMessage, decodeMessage, message, string, bytes, bool } from 'protons-runtime';
export var Peer;
(function (Peer) {
    Peer.codec = () => {
        return message({
            1: { name: 'addresses', codec: Address.codec(), repeats: true },
            2: { name: 'protocols', codec: string, repeats: true },
            3: { name: 'metadata', codec: Metadata.codec(), repeats: true },
            4: { name: 'pubKey', codec: bytes, optional: true },
            5: { name: 'peerRecordEnvelope', codec: bytes, optional: true }
        });
    };
    Peer.encode = (obj) => {
        return encodeMessage(obj, Peer.codec());
    };
    Peer.decode = (buf) => {
        return decodeMessage(buf, Peer.codec());
    };
})(Peer || (Peer = {}));
export var Address;
(function (Address) {
    Address.codec = () => {
        return message({
            1: { name: 'multiaddr', codec: bytes },
            2: { name: 'isCertified', codec: bool, optional: true }
        });
    };
    Address.encode = (obj) => {
        return encodeMessage(obj, Address.codec());
    };
    Address.decode = (buf) => {
        return decodeMessage(buf, Address.codec());
    };
})(Address || (Address = {}));
export var Metadata;
(function (Metadata) {
    Metadata.codec = () => {
        return message({
            1: { name: 'key', codec: string },
            2: { name: 'value', codec: bytes }
        });
    };
    Metadata.encode = (obj) => {
        return encodeMessage(obj, Metadata.codec());
    };
    Metadata.decode = (buf) => {
        return decodeMessage(buf, Metadata.codec());
    };
})(Metadata || (Metadata = {}));
//# sourceMappingURL=peer.js.map