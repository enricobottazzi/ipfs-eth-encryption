import { logger } from '@libp2p/logger';
import { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';
import * as lp from 'it-length-prefixed';
import { pushable } from 'it-pushable';
import { pipe } from 'it-pipe';
import { abortableSource } from 'abortable-iterator';
const log = logger('libp2p-pubsub:peer-streams');
/**
 * Thin wrapper around a peer's inbound / outbound pubsub streams
 */
export class PeerStreams extends EventEmitter {
    constructor(init) {
        super();
        this.id = init.id;
        this.protocol = init.protocol;
        this._inboundAbortController = new AbortController();
        this.closed = false;
    }
    /**
     * Do we have a connection to read from?
     */
    get isReadable() {
        return Boolean(this.inboundStream);
    }
    /**
     * Do we have a connection to write on?
     */
    get isWritable() {
        return Boolean(this.outboundStream);
    }
    /**
     * Send a message to this peer.
     * Throws if there is no `stream` to write to available.
     */
    write(data) {
        if (this.outboundStream == null) {
            const id = this.id.toString();
            throw new Error('No writable connection to ' + id);
        }
        this.outboundStream.push(data);
    }
    /**
     * Attach a raw inbound stream and setup a read stream
     */
    attachInboundStream(stream) {
        // Create and attach a new inbound stream
        // The inbound stream is:
        // - abortable, set to only return on abort, rather than throw
        // - transformed with length-prefix transform
        this._rawInboundStream = stream;
        this.inboundStream = abortableSource(pipe(this._rawInboundStream, lp.decode()), this._inboundAbortController.signal, { returnOnAbort: true });
        this.dispatchEvent(new CustomEvent('stream:inbound'));
        return this.inboundStream;
    }
    /**
     * Attach a raw outbound stream and setup a write stream
     */
    async attachOutboundStream(stream) {
        // If an outbound stream already exists, gently close it
        const _prevStream = this.outboundStream;
        if (this.outboundStream != null) {
            // End the stream without emitting a close event
            await this.outboundStream.end();
        }
        this._rawOutboundStream = stream;
        this.outboundStream = pushable({
            onEnd: (shouldEmit) => {
                // close writable side of the stream
                if (this._rawOutboundStream != null && this._rawOutboundStream.reset != null) { // eslint-disable-line @typescript-eslint/prefer-optional-chain
                    this._rawOutboundStream.reset();
                }
                this._rawOutboundStream = undefined;
                this.outboundStream = undefined;
                if (shouldEmit != null) {
                    this.dispatchEvent(new CustomEvent('close'));
                }
            }
        });
        pipe(this.outboundStream, lp.encode(), this._rawOutboundStream).catch((err) => {
            log.error(err);
        });
        // Only emit if the connection is new
        if (_prevStream == null) {
            this.dispatchEvent(new CustomEvent('stream:outbound'));
        }
        return this.outboundStream;
    }
    /**
     * Closes the open connection to peer
     */
    close() {
        if (this.closed) {
            return;
        }
        this.closed = true;
        // End the outbound stream
        if (this.outboundStream != null) {
            this.outboundStream.end();
        }
        // End the inbound stream
        if (this.inboundStream != null) {
            this._inboundAbortController.abort();
        }
        this._rawOutboundStream = undefined;
        this.outboundStream = undefined;
        this._rawInboundStream = undefined;
        this.inboundStream = undefined;
        this.dispatchEvent(new CustomEvent('close'));
    }
}
//# sourceMappingURL=peer-streams.js.map