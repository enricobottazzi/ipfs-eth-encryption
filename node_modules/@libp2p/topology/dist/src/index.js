import { symbol } from '@libp2p/interfaces/topology';
const noop = () => { };
class TopologyImpl {
    constructor(init) {
        this.min = init.min ?? 0;
        this.max = init.max ?? Infinity;
        this.peers = new Set();
        this.onConnect = init.onConnect ?? noop;
        this.onDisconnect = init.onDisconnect ?? noop;
    }
    get [Symbol.toStringTag]() {
        return symbol.toString();
    }
    get [symbol]() {
        return true;
    }
    async setRegistrar(registrar) {
        this.registrar = registrar;
    }
    /**
     * Notify about peer disconnected event
     */
    disconnect(peerId) {
        this.onDisconnect(peerId);
    }
}
export function createTopology(init) {
    return new TopologyImpl(init);
}
//# sourceMappingURL=index.js.map