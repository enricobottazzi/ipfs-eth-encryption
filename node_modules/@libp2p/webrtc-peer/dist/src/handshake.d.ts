import { EventEmitter } from '@libp2p/interfaces/events';
import type { WebRTCPeerEvents, WRTC, Signal, OfferSignal, AnswerSignal, CandidateSignal, RenegotiateSignal, GoodbyeSignal } from './index.js';
import type { Logger } from '@libp2p/logger';
export interface WebRTCHandshakeOptions {
    log: Logger;
    peerConnection: RTCPeerConnection;
    offerOptions?: RTCOfferOptions;
    wrtc: WRTC;
}
export declare class WebRTCHandshake extends EventEmitter<WebRTCPeerEvents> {
    protected log: Logger;
    protected peerConnection: RTCPeerConnection;
    protected status: 'idle' | 'negotiating';
    protected wrtc: WRTC;
    constructor(options: WebRTCHandshakeOptions);
    handleSignal(signal: Signal): Promise<void>;
    handleOffer(signal: OfferSignal): Promise<void>;
    handleAnswer(signal: AnswerSignal): Promise<void>;
    handleRenegotiate(signal: RenegotiateSignal): Promise<void>;
    handleGoodye(signal: GoodbyeSignal): Promise<void>;
    handleCandidate(signal: CandidateSignal): Promise<void>;
}
//# sourceMappingURL=handshake.d.ts.map