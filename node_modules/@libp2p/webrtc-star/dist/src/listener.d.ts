import type { PeerId } from '@libp2p/interfaces/peer-id';
import type { Multiaddr } from '@multiformats/multiaddr';
import type { Upgrader, ConnectionHandler, Listener, ListenerEvents } from '@libp2p/interfaces/transport';
import type { WebRTCStar, WebRTCStarListenerOptions } from './index.js';
import { EventEmitter } from '@libp2p/interfaces/events';
declare class WebRTCListener extends EventEmitter<ListenerEvents> implements Listener {
    private listeningAddr?;
    private signallingUrl?;
    private readonly upgrader;
    private readonly handler;
    private readonly peerId;
    private readonly transport;
    private readonly options;
    constructor(upgrader: Upgrader, handler: ConnectionHandler, peerId: PeerId, transport: WebRTCStar, options: WebRTCStarListenerOptions);
    listen(ma: Multiaddr): Promise<void>;
    close(): Promise<void>;
    getAddrs(): Multiaddr[];
}
export declare function createListener(upgrader: Upgrader, handler: ConnectionHandler, peerId: PeerId, transport: WebRTCStar, options: WebRTCStarListenerOptions): WebRTCListener;
export {};
//# sourceMappingURL=listener.d.ts.map