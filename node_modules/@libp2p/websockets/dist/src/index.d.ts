/// <reference types="node" />
import { WebSocketOptions } from 'it-ws/client';
import { Transport, MultiaddrFilter, symbol, CreateListenerOptions, DialOptions } from '@libp2p/interfaces/transport';
import type { AbortOptions } from '@libp2p/interfaces';
import type { Multiaddr } from '@multiformats/multiaddr';
import type { DuplexWebSocket } from 'it-ws/duplex';
import type { ClientOptions } from 'ws';
import type { Server } from 'http';
export interface WebSocketsInit extends AbortOptions, WebSocketOptions {
    filter?: MultiaddrFilter;
    websocket?: ClientOptions;
    server?: Server;
}
export declare class WebSockets implements Transport {
    private readonly init?;
    constructor(init?: WebSocketsInit);
    get [Symbol.toStringTag](): string;
    get [symbol](): true;
    dial(ma: Multiaddr, options: DialOptions): Promise<import("@libp2p/interfaces/dist/src/connection").Connection>;
    _connect(ma: Multiaddr, options: AbortOptions): Promise<DuplexWebSocket>;
    /**
     * Creates a Websockets listener. The provided `handler` function will be called
     * anytime a new incoming Connection has been successfully upgraded via
     * `upgrader.upgradeInbound`
     */
    createListener(options: CreateListenerOptions): import("@libp2p/interfaces/transport").Listener;
    /**
     * Takes a list of `Multiaddr`s and returns only valid Websockets addresses.
     * By default, in a browser environment only DNS+WSS multiaddr is accepted,
     * while in a Node.js environment DNS+{WS, WSS} multiaddrs are accepted.
     */
    filter(multiaddrs: Multiaddr[]): Multiaddr[];
}
//# sourceMappingURL=index.d.ts.map