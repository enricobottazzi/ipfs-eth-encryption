import { AbortError } from './abort-error.js';
import type { Duplex, Source, Sink } from 'it-stream-types';
export interface Options<T> {
    onReturnError?: (err: Error) => void;
    onAbort?: (source: Source<T>) => void;
    abortMessage?: string;
    abortCode?: string;
    returnOnAbort?: boolean;
}
export declare function abortableSource<T>(source: Source<T>, signal: AbortSignal, options?: Options<T>): AsyncGenerator<T, void, unknown>;
export declare function abortableSink<T, R>(sink: Sink<T, R>, signal: AbortSignal, options?: Options<T>): Sink<T, R>;
export declare function abortableDuplex<TSource, TSink = TSource, RSink = Promise<void>>(duplex: Duplex<TSource, TSink, RSink>, signal: AbortSignal, options?: Options<TSource>): {
    sink: Sink<TSink, RSink>;
    source: AsyncGenerator<TSource, void, unknown>;
};
export { AbortError };
export { abortableSink as abortableTransform };
//# sourceMappingURL=index.d.ts.map