/**
 * @typedef {import('../../types').NetworkService} NetworkService
 * @typedef {import('@libp2p/interfaces/peer-id').PeerId} PeerId
 * @typedef {import('multiformats/cid').CID} CID
 * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions
 */
export class BitswapAPI {
    /**
     * @param {object} config
     * @param {NetworkService} config.network
     */
    constructor({ network }: {
        network: import("../../types").NetworkService;
    });
    wantlist: (options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => Promise<import("multiformats/cid").CID[]>;
    wantlistForPeer: (peerId: import("@libp2p/interfaces/peer-id").PeerId, options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => Promise<import("multiformats/cid").CID[]>;
    unwant: (cids: import("multiformats/cid").CID | import("multiformats/cid").CID[], options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => Promise<void>;
    stat: (options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => Promise<import("ipfs-core-types/dist/src/bitswap").Stats>;
}
export type NetworkService = import('../../types').NetworkService;
export type PeerId = import('@libp2p/interfaces/peer-id').PeerId;
export type CID = import('multiformats/cid').CID;
export type AbortOptions = import('ipfs-core-types/src/utils').AbortOptions;
//# sourceMappingURL=index.d.ts.map