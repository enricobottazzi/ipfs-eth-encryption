/**
 * @typedef {import('@libp2p/interfaces/keychain').KeyChain} Keychain
 */
export class KeyAPI {
    /**
     * @param {object} config
     * @param {Keychain} config.keychain
     */
    constructor({ keychain }: {
        keychain: Keychain;
    });
    gen: (name: string, options?: import("ipfs-core-types/dist/src/key").GenOptions | undefined) => Promise<import("ipfs-core-types/dist/src/key").Key>;
    list: (options?: import("ipfs-core-types/dist/src").AbortOptions | undefined) => Promise<import("ipfs-core-types/dist/src/key").Key[]>;
    rm: (name: string, options?: import("ipfs-core-types/dist/src").AbortOptions | undefined) => Promise<import("ipfs-core-types/dist/src/key").Key>;
    rename: (oldName: string, newName: string, options?: import("ipfs-core-types/dist/src").AbortOptions | undefined) => Promise<import("ipfs-core-types/dist/src/key").RenameKeyResult>;
    export: (name: string, password: string, options?: import("ipfs-core-types/dist/src").AbortOptions | undefined) => Promise<string>;
    import: (name: string, pem: string, password: string, options?: import("ipfs-core-types/dist/src").AbortOptions | undefined) => Promise<import("ipfs-core-types/dist/src/key").Key>;
    info: (name: string, options?: import("ipfs-core-types/dist/src").AbortOptions | undefined) => Promise<import("ipfs-core-types/dist/src/key").Key>;
}
export type Keychain = import('@libp2p/interfaces/keychain').KeyChain;
//# sourceMappingURL=index.d.ts.map