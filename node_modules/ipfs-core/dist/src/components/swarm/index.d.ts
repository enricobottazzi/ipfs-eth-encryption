export class SwarmAPI {
    /**
     * @param {object} config
     * @param {import('../../types').NetworkService} config.network
     */
    constructor({ network }: {
        network: import('../../types').NetworkService;
    });
    addrs: (options?: import("ipfs-core-types/dist/src").AbortOptions | undefined) => Promise<import("ipfs-core-types/dist/src/swarm").AddrsResult[]>;
    connect: (multiaddrOrPeerId: import("@libp2p/interfaces/dist/src/peer-id").PeerId | import("ipfs-http-client").multiaddr, options?: import("ipfs-core-types/dist/src").AbortOptions | undefined) => Promise<void>;
    disconnect: (addr: import("@libp2p/interfaces/dist/src/peer-id").PeerId | import("ipfs-http-client").multiaddr, options?: import("ipfs-core-types/dist/src").AbortOptions | undefined) => Promise<void>;
    localAddrs: (options?: import("ipfs-core-types/dist/src").AbortOptions | undefined) => Promise<import("ipfs-http-client").multiaddr[]>;
    peers: (options?: import("ipfs-core-types/dist/src/swarm").PeersOptions | undefined) => Promise<import("ipfs-core-types/dist/src/swarm").PeersResult[]>;
}
//# sourceMappingURL=index.d.ts.map