import { Key } from 'interface-datastore/key';
import { IpnsEntry } from './pb/ipns.js';
import type { PeerId } from '@libp2p/interfaces/peer-id';
export declare const namespace = "/ipns/";
export declare const namespaceLength: number;
export interface IPNSEntry {
    value: Uint8Array;
    signature: Uint8Array;
    validityType: IpnsEntry.ValidityType;
    validity: Uint8Array;
    sequence: bigint;
    ttl?: bigint;
    pubKey?: Uint8Array;
    signatureV2?: Uint8Array;
    data?: Uint8Array;
}
export interface IPNSEntryData {
    Value: Uint8Array;
    Validity: Uint8Array;
    ValidityType: IpnsEntry.ValidityType;
    Sequence: bigint;
    TTL: bigint;
}
export interface IDKeys {
    routingPubKey: Key;
    pkKey: Key;
    routingKey: Key;
    ipnsKey: Key;
}
/**
 * Creates a new ipns entry and signs it with the given private key.
 * The ipns entry validity should follow the [RFC3339]{@link https://www.ietf.org/rfc/rfc3339.txt} with nanoseconds precision.
 * Note: This function does not embed the public key. If you want to do that, use `EmbedPublicKey`.
 *
 * @param {PeerId} peerId - peer id containing private key for signing the record.
 * @param {Uint8Array} value - value to be stored in the record.
 * @param {number | bigint} seq - number representing the current version of the record.
 * @param {number} lifetime - lifetime of the record (in milliseconds).
 */
export declare const create: (peerId: PeerId, value: Uint8Array, seq: number | bigint, lifetime: number) => Promise<IPNSEntry>;
/**
 * Same as create(), but instead of generating a new Date, it receives the intended expiration time
 * WARNING: nano precision is not standard, make sure the value in seconds is 9 orders of magnitude lesser than the one provided.
 *
 * @param {PeerId} peerId - PeerId containing private key for signing the record.
 * @param {Uint8Array} value - value to be stored in the record.
 * @param {number | bigint} seq - number representing the current version of the record.
 * @param {string} expiration - expiration datetime for record in the [RFC3339]{@link https://www.ietf.org/rfc/rfc3339.txt} with nanoseconds precision.
 */
export declare const createWithExpiration: (peerId: PeerId, value: Uint8Array, seq: number | bigint, expiration: string) => Promise<IPNSEntry>;
/**
 * Get key for storing the record locally.
 * Format: /ipns/${base32(<HASH>)}
 *
 * @param {Uint8Array} key - peer identifier object.
 */
export declare const getLocalKey: (key: Uint8Array) => Key;
export { unmarshal } from './utils.js';
export { marshal } from './utils.js';
export { peerIdToRoutingKey } from './utils.js';
export { peerIdFromRoutingKey } from './utils.js';
//# sourceMappingURL=index.d.ts.map