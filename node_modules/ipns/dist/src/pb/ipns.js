/* eslint-disable import/export */
/* eslint-disable @typescript-eslint/no-namespace */
import { enumeration, encodeMessage, decodeMessage, message, bytes, uint64 } from 'protons-runtime';
export var IpnsEntry;
(function (IpnsEntry) {
    let ValidityType;
    (function (ValidityType) {
        ValidityType["EOL"] = "EOL";
    })(ValidityType = IpnsEntry.ValidityType || (IpnsEntry.ValidityType = {}));
    let __ValidityTypeValues;
    (function (__ValidityTypeValues) {
        __ValidityTypeValues[__ValidityTypeValues["EOL"] = 0] = "EOL";
    })(__ValidityTypeValues || (__ValidityTypeValues = {}));
    (function (ValidityType) {
        ValidityType.codec = () => {
            return enumeration(__ValidityTypeValues);
        };
    })(ValidityType = IpnsEntry.ValidityType || (IpnsEntry.ValidityType = {}));
    IpnsEntry.codec = () => {
        return message({
            1: { name: 'value', codec: bytes, optional: true },
            2: { name: 'signature', codec: bytes, optional: true },
            3: { name: 'validityType', codec: IpnsEntry.ValidityType.codec(), optional: true },
            4: { name: 'validity', codec: bytes, optional: true },
            5: { name: 'sequence', codec: uint64, optional: true },
            6: { name: 'ttl', codec: uint64, optional: true },
            7: { name: 'pubKey', codec: bytes, optional: true },
            8: { name: 'signatureV2', codec: bytes, optional: true },
            9: { name: 'data', codec: bytes, optional: true }
        });
    };
    IpnsEntry.encode = (obj) => {
        return encodeMessage(obj, IpnsEntry.codec());
    };
    IpnsEntry.decode = (buf) => {
        return decodeMessage(buf, IpnsEntry.codec());
    };
})(IpnsEntry || (IpnsEntry = {}));
//# sourceMappingURL=ipns.js.map