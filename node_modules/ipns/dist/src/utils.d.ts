import type { PeerId } from '@libp2p/interfaces/peer-id';
import type { IPNSEntry, IPNSEntryData } from './index.js';
import { IpnsEntry } from './pb/ipns.js';
/**
 * Convert a JavaScript date into an `RFC3339Nano` formatted
 * string
 */
export declare function toRFC3339(time: Date): string;
/**
 * Parses a date string formatted as `RFC3339Nano` into a
 * JavaScript Date object
 */
export declare function parseRFC3339(time: string): Date;
/**
 * Extracts a public key from the passed PeerId, falling
 * back to the pubKey embedded in the ipns record
 */
export declare const extractPublicKey: (peerId: PeerId, entry: IpnsEntry) => Promise<import("@libp2p/interfaces/dist/src/keys").PublicKey>;
/**
 * Utility for creating the record data for being signed
 */
export declare const ipnsEntryDataForV1Sig: (value: Uint8Array, validityType: IpnsEntry.ValidityType, validity: Uint8Array) => Uint8Array;
/**
 * Utility for creating the record data for being signed
 */
export declare const ipnsEntryDataForV2Sig: (data: Uint8Array) => Uint8Array;
export declare const marshal: (obj: IPNSEntry) => Uint8Array;
export declare const unmarshal: (buf: Uint8Array) => IPNSEntry;
export declare const peerIdToRoutingKey: (peerId: PeerId) => Uint8Array;
export declare const peerIdFromRoutingKey: (key: Uint8Array) => PeerId;
export declare const createCborData: (value: Uint8Array, validity: Uint8Array, validityType: string, sequence: bigint, ttl: bigint) => Uint8Array;
export declare const parseCborData: (buf: Uint8Array) => IPNSEntryData;
//# sourceMappingURL=utils.d.ts.map