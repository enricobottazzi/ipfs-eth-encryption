import duplex from './duplex.js';
import { WebSocketServer as WSServer } from 'ws';
import http from 'http';
import https from 'https';
import { EventEmitter } from 'events';
class Server extends EventEmitter {
    constructor(server) {
        super();
        this.server = server;
    }
    async listen(addrInfo) {
        return await new Promise(resolve => {
            this.once('listening', () => resolve(this));
            this.server.listen(typeof addrInfo === 'number' ? addrInfo : addrInfo.port);
        });
    }
    async close() {
        return await new Promise((resolve, reject) => {
            this.server.close((err) => {
                if (err != null) {
                    return reject(err);
                }
                resolve();
            });
        });
    }
    address() {
        return this.server.address();
    }
}
export function createServer(opts) {
    opts = opts ?? {};
    const server = opts.server ?? (opts.key != null && opts.cert != null ? https.createServer(opts) : http.createServer());
    const wss = new Server(server);
    if (opts.onConnection != null) {
        wss.on('connection', opts.onConnection);
    }
    function proxy(server, event) {
        return server.on(event, (...args) => {
            wss.emit(event, ...args);
        });
    }
    const wsServer = new WSServer({
        server: server,
        perMessageDeflate: false,
        verifyClient: opts.verifyClient
    });
    proxy(server, 'listening');
    proxy(server, 'request');
    proxy(server, 'close');
    wsServer.on('connection', function (socket, req) {
        const addr = wsServer.address();
        if (typeof addr === 'string') {
            wss.emit('error', new Error('Cannot listen on unix sockets'));
            return;
        }
        if (req.socket.remoteAddress == null || req.socket.remotePort == null) {
            wss.emit('error', new Error('Remote connection did not have address and/or port'));
            return;
        }
        const stream = {
            ...duplex(socket, {
                remoteAddress: req.socket.remoteAddress,
                remotePort: req.socket.remotePort
            }),
            localAddress: addr.address,
            localPort: addr.port
        };
        wss.emit('connection', stream, req);
    });
    return wss;
}
//# sourceMappingURL=server.js.map