import type { AddressManagerEvents } from '@libp2p/interfaces/address-manager';
import { EventEmitter } from '@libp2p/interfaces/events';
import { Multiaddr } from '@multiformats/multiaddr';
import type { Components } from '@libp2p/interfaces/components';
export interface AddressManagerInit {
    announceFilter?: AddressFilter;
    /**
     * list of multiaddrs string representation to listen
     */
    listen?: string[];
    /**
     * list of multiaddrs string representation to announce
     */
    announce?: string[];
    /**
     * list of multiaddrs string representation to never announce
     */
    noAnnounce?: string[];
}
export interface AddressFilter {
    (addrs: Multiaddr[]): Multiaddr[];
}
export declare class DefaultAddressManager extends EventEmitter<AddressManagerEvents> {
    private readonly components;
    private readonly listen;
    private readonly announce;
    private readonly observed;
    private readonly announceFilter;
    /**
     * Responsible for managing the peer addresses.
     * Peers can specify their listen and announce addresses.
     * The listen addresses will be used by the libp2p transports to listen for new connections,
     * while the announce addresses will be used for the peer addresses' to other peers in the network.
     */
    constructor(components: Components, init: AddressManagerInit);
    /**
     * Get peer listen multiaddrs
     */
    getListenAddrs(): Multiaddr[];
    /**
     * Get peer announcing multiaddrs
     */
    getAnnounceAddrs(): Multiaddr[];
    /**
     * Get observed multiaddrs
     */
    getObservedAddrs(): Multiaddr[];
    /**
     * Add peer observed addresses
     */
    addObservedAddr(addr: string | Multiaddr): void;
    getAddresses(): Multiaddr[];
}
//# sourceMappingURL=index.d.ts.map