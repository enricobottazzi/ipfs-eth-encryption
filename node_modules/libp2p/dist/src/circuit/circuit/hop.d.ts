import { StreamHandler } from './stream-handler.js';
import { CircuitRelay as CircuitPB } from '../pb/index.js';
import type { Connection } from '@libp2p/interfaces/connection';
import type { Duplex } from 'it-stream-types';
import type { Circuit } from '../transport.js';
import type { ConnectionManager } from '@libp2p/interfaces/connection-manager';
export interface HopRequest {
    connection: Connection;
    request: CircuitPB;
    streamHandler: StreamHandler;
    circuit: Circuit;
    connectionManager: ConnectionManager;
}
export declare function handleHop(hopRequest: HopRequest): Promise<void>;
export interface HopConfig {
    connection: Connection;
    request: CircuitPB;
}
/**
 * Performs a HOP request to a relay peer, to request a connection to another
 * peer. A new, virtual, connection will be created between the two via the relay.
 */
export declare function hop(options: HopConfig): Promise<Duplex<Uint8Array>>;
export interface CanHopOptions {
    connection: Connection;
}
/**
 * Performs a CAN_HOP request to a relay peer, in order to understand its capabilities
 */
export declare function canHop(options: CanHopOptions): Promise<boolean>;
export interface HandleCanHopOptions {
    connection: Connection;
    streamHandler: StreamHandler;
    circuit: Circuit;
}
/**
 * Creates an unencoded CAN_HOP response based on the Circuits configuration
 */
export declare function handleCanHop(options: HandleCanHopOptions): void;
//# sourceMappingURL=hop.d.ts.map