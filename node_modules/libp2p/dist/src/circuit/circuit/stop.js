import { logger } from '@libp2p/logger';
import { CircuitRelay as CircuitPB } from '../pb/index.js';
import { RELAY_CODEC } from '../multicodec.js';
import { StreamHandler } from './stream-handler.js';
import { validateAddrs } from './utils.js';
const log = logger('libp2p:circuit:stop');
/**
 * Handles incoming STOP requests
 */
export function handleStop(options) {
    const { connection, request, streamHandler } = options;
    // Validate the STOP request has the required input
    try {
        validateAddrs(request, streamHandler);
    }
    catch (err) {
        log.error('invalid stop request via peer %p %o', connection.remotePeer, err);
        return;
    }
    // The request is valid
    log('stop request is valid');
    streamHandler.write({
        type: CircuitPB.Type.STATUS,
        code: CircuitPB.Status.SUCCESS
    });
    return streamHandler.rest();
}
/**
 * Creates a STOP request
 */
export async function stop(options) {
    const { connection, request } = options;
    const { stream } = await connection.newStream([RELAY_CODEC]);
    log('starting stop request to %p', connection.remotePeer);
    const streamHandler = new StreamHandler({ stream });
    streamHandler.write(request);
    const response = await streamHandler.read();
    if (response == null) {
        streamHandler.close();
        return;
    }
    if (response.code === CircuitPB.Status.SUCCESS) {
        log('stop request to %p was successful', connection.remotePeer);
        return streamHandler.rest();
    }
    log('stop request failed with code %d', response.code);
    streamHandler.close();
}
//# sourceMappingURL=stop.js.map