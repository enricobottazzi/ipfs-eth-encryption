import { CircuitRelay } from '../pb/index.js';
import type { Stream } from '@libp2p/interfaces/connection';
export interface StreamHandlerOptions {
    /**
     * A duplex iterable
     */
    stream: Stream;
    /**
     * max bytes length of message
     */
    maxLength?: number;
}
export declare class StreamHandler {
    private readonly stream;
    private readonly shake;
    private readonly decoder;
    constructor(options: StreamHandlerOptions);
    /**
     * Read and decode message
     */
    read(): Promise<CircuitRelay | undefined>;
    /**
     * Encode and write array of buffers
     */
    write(msg: CircuitRelay): void;
    /**
     * Return the handshake rest stream and invalidate handler
     */
    rest(): import("it-stream-types").Duplex<Uint8Array, Uint8Array, Promise<void>>;
    /**
     * @param {CircuitRelay} msg - An unencoded CircuitRelay protobuf message
     */
    end(msg: CircuitRelay): void;
    /**
     * Close the stream
     */
    close(): void;
}
//# sourceMappingURL=stream-handler.d.ts.map