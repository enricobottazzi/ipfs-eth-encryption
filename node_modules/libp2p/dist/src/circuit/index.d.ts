import type { AddressSorter } from '@libp2p/interfaces/peer-store';
import type { Startable } from '@libp2p/interfaces/startable';
import type { Components } from '@libp2p/interfaces/components';
export interface RelayAdvertiseConfig {
    bootDelay?: number;
    enabled?: boolean;
    ttl?: number;
}
export interface HopConfig {
    enabled?: boolean;
    active?: boolean;
}
export interface AutoRelayConfig {
    enabled?: boolean;
    /**
     * maximum number of relays to listen
     */
    maxListeners: number;
}
export interface RelayInit {
    addressSorter?: AddressSorter;
    maxListeners?: number;
    onError?: (error: Error, msg?: string) => void;
    hop: HopConfig;
    advertise: RelayAdvertiseConfig;
    autoRelay: AutoRelayConfig;
}
export declare class Relay implements Startable {
    private readonly components;
    private readonly init;
    private readonly autoRelay?;
    private timeout?;
    private started;
    /**
     * Creates an instance of Relay
     */
    constructor(components: Components, init: RelayInit);
    isStarted(): boolean;
    /**
     * Start Relay service
     */
    start(): Promise<void>;
    /**
     * Stop Relay service
     */
    stop(): Promise<void>;
    /**
     * Advertise hop relay service in the network.
     */
    _advertiseService(): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map