import type { Codec } from 'protons-runtime';
export interface CircuitRelay {
    type?: CircuitRelay.Type;
    srcPeer?: CircuitRelay.Peer;
    dstPeer?: CircuitRelay.Peer;
    code?: CircuitRelay.Status;
}
export declare namespace CircuitRelay {
    enum Status {
        SUCCESS = "SUCCESS",
        HOP_SRC_ADDR_TOO_LONG = "HOP_SRC_ADDR_TOO_LONG",
        HOP_DST_ADDR_TOO_LONG = "HOP_DST_ADDR_TOO_LONG",
        HOP_SRC_MULTIADDR_INVALID = "HOP_SRC_MULTIADDR_INVALID",
        HOP_DST_MULTIADDR_INVALID = "HOP_DST_MULTIADDR_INVALID",
        HOP_NO_CONN_TO_DST = "HOP_NO_CONN_TO_DST",
        HOP_CANT_DIAL_DST = "HOP_CANT_DIAL_DST",
        HOP_CANT_OPEN_DST_STREAM = "HOP_CANT_OPEN_DST_STREAM",
        HOP_CANT_SPEAK_RELAY = "HOP_CANT_SPEAK_RELAY",
        HOP_CANT_RELAY_TO_SELF = "HOP_CANT_RELAY_TO_SELF",
        STOP_SRC_ADDR_TOO_LONG = "STOP_SRC_ADDR_TOO_LONG",
        STOP_DST_ADDR_TOO_LONG = "STOP_DST_ADDR_TOO_LONG",
        STOP_SRC_MULTIADDR_INVALID = "STOP_SRC_MULTIADDR_INVALID",
        STOP_DST_MULTIADDR_INVALID = "STOP_DST_MULTIADDR_INVALID",
        STOP_RELAY_REFUSED = "STOP_RELAY_REFUSED",
        MALFORMED_MESSAGE = "MALFORMED_MESSAGE"
    }
    namespace Status {
        const codec: () => Codec<typeof Status>;
    }
    enum Type {
        HOP = "HOP",
        STOP = "STOP",
        STATUS = "STATUS",
        CAN_HOP = "CAN_HOP"
    }
    namespace Type {
        const codec: () => Codec<typeof Type>;
    }
    interface Peer {
        id: Uint8Array;
        addrs: Uint8Array[];
    }
    namespace Peer {
        const codec: () => Codec<Peer>;
        const encode: (obj: Peer) => Uint8Array;
        const decode: (buf: Uint8Array) => Peer;
    }
    const codec: () => Codec<CircuitRelay>;
    const encode: (obj: CircuitRelay) => Uint8Array;
    const decode: (buf: Uint8Array) => CircuitRelay;
}
//# sourceMappingURL=index.d.ts.map