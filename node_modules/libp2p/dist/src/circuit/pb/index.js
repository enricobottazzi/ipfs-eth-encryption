/* eslint-disable import/export */
/* eslint-disable @typescript-eslint/no-namespace */
import { enumeration, encodeMessage, decodeMessage, message, bytes } from 'protons-runtime';
export var CircuitRelay;
(function (CircuitRelay) {
    let Status;
    (function (Status) {
        Status["SUCCESS"] = "SUCCESS";
        Status["HOP_SRC_ADDR_TOO_LONG"] = "HOP_SRC_ADDR_TOO_LONG";
        Status["HOP_DST_ADDR_TOO_LONG"] = "HOP_DST_ADDR_TOO_LONG";
        Status["HOP_SRC_MULTIADDR_INVALID"] = "HOP_SRC_MULTIADDR_INVALID";
        Status["HOP_DST_MULTIADDR_INVALID"] = "HOP_DST_MULTIADDR_INVALID";
        Status["HOP_NO_CONN_TO_DST"] = "HOP_NO_CONN_TO_DST";
        Status["HOP_CANT_DIAL_DST"] = "HOP_CANT_DIAL_DST";
        Status["HOP_CANT_OPEN_DST_STREAM"] = "HOP_CANT_OPEN_DST_STREAM";
        Status["HOP_CANT_SPEAK_RELAY"] = "HOP_CANT_SPEAK_RELAY";
        Status["HOP_CANT_RELAY_TO_SELF"] = "HOP_CANT_RELAY_TO_SELF";
        Status["STOP_SRC_ADDR_TOO_LONG"] = "STOP_SRC_ADDR_TOO_LONG";
        Status["STOP_DST_ADDR_TOO_LONG"] = "STOP_DST_ADDR_TOO_LONG";
        Status["STOP_SRC_MULTIADDR_INVALID"] = "STOP_SRC_MULTIADDR_INVALID";
        Status["STOP_DST_MULTIADDR_INVALID"] = "STOP_DST_MULTIADDR_INVALID";
        Status["STOP_RELAY_REFUSED"] = "STOP_RELAY_REFUSED";
        Status["MALFORMED_MESSAGE"] = "MALFORMED_MESSAGE";
    })(Status = CircuitRelay.Status || (CircuitRelay.Status = {}));
    let __StatusValues;
    (function (__StatusValues) {
        __StatusValues[__StatusValues["SUCCESS"] = 100] = "SUCCESS";
        __StatusValues[__StatusValues["HOP_SRC_ADDR_TOO_LONG"] = 220] = "HOP_SRC_ADDR_TOO_LONG";
        __StatusValues[__StatusValues["HOP_DST_ADDR_TOO_LONG"] = 221] = "HOP_DST_ADDR_TOO_LONG";
        __StatusValues[__StatusValues["HOP_SRC_MULTIADDR_INVALID"] = 250] = "HOP_SRC_MULTIADDR_INVALID";
        __StatusValues[__StatusValues["HOP_DST_MULTIADDR_INVALID"] = 251] = "HOP_DST_MULTIADDR_INVALID";
        __StatusValues[__StatusValues["HOP_NO_CONN_TO_DST"] = 260] = "HOP_NO_CONN_TO_DST";
        __StatusValues[__StatusValues["HOP_CANT_DIAL_DST"] = 261] = "HOP_CANT_DIAL_DST";
        __StatusValues[__StatusValues["HOP_CANT_OPEN_DST_STREAM"] = 262] = "HOP_CANT_OPEN_DST_STREAM";
        __StatusValues[__StatusValues["HOP_CANT_SPEAK_RELAY"] = 270] = "HOP_CANT_SPEAK_RELAY";
        __StatusValues[__StatusValues["HOP_CANT_RELAY_TO_SELF"] = 280] = "HOP_CANT_RELAY_TO_SELF";
        __StatusValues[__StatusValues["STOP_SRC_ADDR_TOO_LONG"] = 320] = "STOP_SRC_ADDR_TOO_LONG";
        __StatusValues[__StatusValues["STOP_DST_ADDR_TOO_LONG"] = 321] = "STOP_DST_ADDR_TOO_LONG";
        __StatusValues[__StatusValues["STOP_SRC_MULTIADDR_INVALID"] = 350] = "STOP_SRC_MULTIADDR_INVALID";
        __StatusValues[__StatusValues["STOP_DST_MULTIADDR_INVALID"] = 351] = "STOP_DST_MULTIADDR_INVALID";
        __StatusValues[__StatusValues["STOP_RELAY_REFUSED"] = 390] = "STOP_RELAY_REFUSED";
        __StatusValues[__StatusValues["MALFORMED_MESSAGE"] = 400] = "MALFORMED_MESSAGE";
    })(__StatusValues || (__StatusValues = {}));
    (function (Status) {
        Status.codec = () => {
            return enumeration(__StatusValues);
        };
    })(Status = CircuitRelay.Status || (CircuitRelay.Status = {}));
    let Type;
    (function (Type) {
        Type["HOP"] = "HOP";
        Type["STOP"] = "STOP";
        Type["STATUS"] = "STATUS";
        Type["CAN_HOP"] = "CAN_HOP";
    })(Type = CircuitRelay.Type || (CircuitRelay.Type = {}));
    let __TypeValues;
    (function (__TypeValues) {
        __TypeValues[__TypeValues["HOP"] = 1] = "HOP";
        __TypeValues[__TypeValues["STOP"] = 2] = "STOP";
        __TypeValues[__TypeValues["STATUS"] = 3] = "STATUS";
        __TypeValues[__TypeValues["CAN_HOP"] = 4] = "CAN_HOP";
    })(__TypeValues || (__TypeValues = {}));
    (function (Type) {
        Type.codec = () => {
            return enumeration(__TypeValues);
        };
    })(Type = CircuitRelay.Type || (CircuitRelay.Type = {}));
    let Peer;
    (function (Peer) {
        Peer.codec = () => {
            return message({
                1: { name: 'id', codec: bytes },
                2: { name: 'addrs', codec: bytes, repeats: true }
            });
        };
        Peer.encode = (obj) => {
            return encodeMessage(obj, Peer.codec());
        };
        Peer.decode = (buf) => {
            return decodeMessage(buf, Peer.codec());
        };
    })(Peer = CircuitRelay.Peer || (CircuitRelay.Peer = {}));
    CircuitRelay.codec = () => {
        return message({
            1: { name: 'type', codec: CircuitRelay.Type.codec(), optional: true },
            2: { name: 'srcPeer', codec: CircuitRelay.Peer.codec(), optional: true },
            3: { name: 'dstPeer', codec: CircuitRelay.Peer.codec(), optional: true },
            4: { name: 'code', codec: CircuitRelay.Status.codec(), optional: true }
        });
    };
    CircuitRelay.encode = (obj) => {
        return encodeMessage(obj, CircuitRelay.codec());
    };
    CircuitRelay.decode = (buf) => {
        return decodeMessage(buf, CircuitRelay.codec());
    };
})(CircuitRelay || (CircuitRelay = {}));
//# sourceMappingURL=index.js.map