import { Multiaddr } from '@multiformats/multiaddr';
import { symbol } from '@libp2p/interfaces/transport';
import { Components, Initializable } from '@libp2p/interfaces/components';
import type { AbortOptions } from '@libp2p/interfaces';
import type { IncomingStreamData } from '@libp2p/interfaces/registrar';
import type { Listener, Transport, CreateListenerOptions } from '@libp2p/interfaces/transport';
import type { Connection } from '@libp2p/interfaces/connection';
export declare class Circuit implements Transport, Initializable {
    private handler?;
    private components;
    init(components: Components): void;
    hopEnabled(): boolean;
    hopActive(): boolean;
    get [symbol](): true;
    get [Symbol.toStringTag](): string;
    _onProtocol(data: IncomingStreamData): Promise<void>;
    /**
     * Dial a peer over a relay
     */
    dial(ma: Multiaddr, options?: AbortOptions): Promise<Connection>;
    /**
     * Create a listener
     */
    createListener(options: CreateListenerOptions): Listener;
    /**
     * Filter check for all Multiaddrs that this transport can dial on
     *
     * @param {Multiaddr[]} multiaddrs
     * @returns {Multiaddr[]}
     */
    filter(multiaddrs: Multiaddr[]): Multiaddr[];
}
//# sourceMappingURL=transport.d.ts.map