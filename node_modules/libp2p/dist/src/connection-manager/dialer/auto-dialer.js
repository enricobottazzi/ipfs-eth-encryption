import { logger } from '@libp2p/logger';
import { TimeoutController } from 'timeout-abort-controller';
const log = logger('libp2p:dialer:auto-dialer');
export class AutoDialer {
    constructor(components, init) {
        this.components = components;
        this.enabled = init.enabled;
        this.minConnections = init.minConnections;
        this.dialTimeout = init.dialTimeout;
    }
    handle(evt) {
        const { detail: peer } = evt;
        if (!this.enabled) {
            return;
        }
        const connections = this.components.getConnectionManager().getConnections(peer.id);
        // If auto dialing is on and we have no connection to the peer, check if we should dial
        if (connections.length === 0) {
            const minConnections = this.minConnections ?? 0;
            const allConnections = this.components.getConnectionManager().getConnections();
            if (minConnections > allConnections.length) {
                log('auto-dialing discovered peer %p with timeout %d', peer.id, this.dialTimeout);
                const controller = new TimeoutController(this.dialTimeout);
                void this.components.getConnectionManager().openConnection(peer.id, {
                    signal: controller.signal
                })
                    .catch(err => {
                    log.error('could not connect to discovered peer %p with %o', peer.id, err);
                })
                    .finally(() => {
                    controller.clear();
                });
            }
        }
    }
}
//# sourceMappingURL=auto-dialer.js.map