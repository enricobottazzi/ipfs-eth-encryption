import type { Multiaddr } from '@multiformats/multiaddr';
import type { Connection } from '@libp2p/interfaces/connection';
import type { AbortOptions } from '@libp2p/interfaces';
import type { Dialer } from './index.js';
export interface DialAction {
    (m: Multiaddr, options: AbortOptions): Promise<Connection>;
}
export interface DialRequestOptions {
    addrs: Multiaddr[];
    dialAction: DialAction;
    dialer: Dialer;
}
export declare class DialRequest {
    private readonly addrs;
    private readonly dialer;
    private readonly dialAction;
    /**
     * Manages running the `dialAction` on multiple provided `addrs` in parallel
     * up to a maximum determined by the number of tokens returned
     * from `dialer.getTokens`. Once a DialRequest is created, it can be
     * started using `DialRequest.run(options)`. Once a single dial has succeeded,
     * all other dials in the request will be cancelled.
     */
    constructor(options: DialRequestOptions);
    run(options?: AbortOptions): Promise<Connection>;
}
//# sourceMappingURL=dial-request.d.ts.map