import type { DualDHT, QueryEvent, SingleDHT } from '@libp2p/interfaces/dht';
import type { PeerDiscoveryEvents } from '@libp2p/interfaces/peer-discovery';
import { EventEmitter } from '@libp2p/interfaces/events';
import { symbol } from '@libp2p/interfaces/peer-discovery';
export declare class DummyDHT extends EventEmitter<PeerDiscoveryEvents> implements DualDHT {
    get [symbol](): true;
    get [Symbol.toStringTag](): string;
    get wan(): SingleDHT;
    get lan(): SingleDHT;
    get(): AsyncIterable<QueryEvent>;
    findProviders(): AsyncIterable<QueryEvent>;
    findPeer(): AsyncIterable<QueryEvent>;
    getClosestPeers(): AsyncIterable<QueryEvent>;
    provide(): AsyncIterable<QueryEvent>;
    put(): AsyncIterable<QueryEvent>;
    getMode(): Promise<'client' | 'server'>;
    setMode(): Promise<void>;
    refreshRoutingTable(): Promise<void>;
}
//# sourceMappingURL=dummy-dht.d.ts.map