import errCode from 'err-code';
import { messages, codes } from '../errors.js';
import { EventEmitter } from '@libp2p/interfaces/events';
import { symbol } from '@libp2p/interfaces/peer-discovery';
export class DummyDHT extends EventEmitter {
    get [symbol]() {
        return true;
    }
    get [Symbol.toStringTag]() {
        return '@libp2p/dummy-dht';
    }
    get wan() {
        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);
    }
    get lan() {
        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);
    }
    get() {
        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);
    }
    findProviders() {
        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);
    }
    findPeer() {
        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);
    }
    getClosestPeers() {
        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);
    }
    provide() {
        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);
    }
    put() {
        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);
    }
    async getMode() {
        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);
    }
    async setMode() {
        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);
    }
    async refreshRoutingTable() {
        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);
    }
}
//# sourceMappingURL=dummy-dht.js.map