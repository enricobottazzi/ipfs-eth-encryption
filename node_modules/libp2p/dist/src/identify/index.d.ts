import { Multiaddr } from '@multiformats/multiaddr';
import { Identify } from './pb/message.js';
import type { IncomingStreamData } from '@libp2p/interfaces/registrar';
import type { Connection } from '@libp2p/interfaces/connection';
import type { Startable } from '@libp2p/interfaces/startable';
import type { Components } from '@libp2p/interfaces/components';
import type { AbortOptions } from '@libp2p/interfaces';
export interface HostProperties {
    agentVersion: string;
}
export interface IdentifyServiceInit {
    /**
     * The prefix to use for the protocol (default: 'ipfs')
     */
    protocolPrefix: string;
    /**
     * What details we should send as part of an identify message
     */
    host: HostProperties;
    /**
     * How long we should wait for a remote peer to send their identify response
     */
    timeout?: number;
    /**
     * Identify responses larger than this in bytes will be rejected (default: 8192)
     */
    maxIdentifyMessageSize?: number;
}
export declare class IdentifyService implements Startable {
    private readonly components;
    private readonly identifyProtocolStr;
    private readonly identifyPushProtocolStr;
    private readonly host;
    private readonly init;
    private started;
    constructor(components: Components, init: IdentifyServiceInit);
    isStarted(): boolean;
    start(): Promise<void>;
    stop(): Promise<void>;
    /**
     * Send an Identify Push update to the list of connections
     */
    push(connections: Connection[]): Promise<void>;
    /**
     * Calls `push` on all peer connections
     */
    pushToPeerStore(): Promise<void>;
    _identify(connection: Connection, options?: AbortOptions): Promise<Identify>;
    /**
     * Requests the `Identify` message from peer associated with the given `connection`.
     * If the identified peer does not match the `PeerId` associated with the connection,
     * an error will be thrown.
     */
    identify(connection: Connection, options?: AbortOptions): Promise<void>;
    /**
     * A handler to register with Libp2p to process identify messages
     */
    handleMessage(data: IncomingStreamData): Promise<void> | undefined;
    /**
     * Sends the `Identify` response with the Signed Peer Record
     * to the requesting peer over the given `connection`
     */
    _handleIdentify(data: IncomingStreamData): Promise<void>;
    /**
     * Reads the Identify Push message from the given `connection`
     */
    _handlePush(data: IncomingStreamData): Promise<void>;
    /**
     * Takes the `addr` and converts it to a Multiaddr if possible
     */
    static getCleanMultiaddr(addr: Uint8Array | string | null | undefined): Multiaddr | undefined;
}
/**
 * The protocols the IdentifyService supports
 */
export declare const multicodecs: {
    IDENTIFY: string;
    IDENTIFY_PUSH: string;
};
export declare const Message: {
    Identify: typeof Identify;
};
//# sourceMappingURL=index.d.ts.map