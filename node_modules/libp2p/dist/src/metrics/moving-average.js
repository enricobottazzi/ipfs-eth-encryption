export class DefaultMovingAverage {
    constructor(timespan) {
        if (typeof timespan !== 'number') {
            throw new Error('must provide a timespan to the moving average constructor');
        }
        if (timespan <= 0) {
            throw new Error('must provide a timespan > 0 to the moving average constructor');
        }
        this.timespan = timespan;
        this.movingAverage = 0;
        this.variance = 0;
        this.deviation = 0;
        this.forecast = 0;
    }
    alpha(t, pt) {
        return 1 - (Math.exp(-(t - pt) / this.timespan));
    }
    push(time, value) {
        if (this.previousTime != null) {
            // calculate moving average
            const a = this.alpha(time, this.previousTime);
            const diff = value - this.movingAverage;
            const incr = a * diff;
            this.movingAverage = a * value + (1 - a) * this.movingAverage;
            // calculate variance & deviation
            this.variance = (1 - a) * (this.variance + diff * incr);
            this.deviation = Math.sqrt(this.variance);
            // calculate forecast
            this.forecast = this.movingAverage + a * diff;
        }
        else {
            this.movingAverage = value;
        }
        this.previousTime = time;
    }
}
export function createMovingAverage(timespan) {
    return new DefaultMovingAverage(timespan);
}
//# sourceMappingURL=moving-average.js.map