import { NatAPI } from '@achingbrain/nat-port-mapper';
import type { Startable } from '@libp2p/interfaces/startable';
import type { Components } from '@libp2p/interfaces/components';
export interface PMPOptions {
    /**
     * Whether to enable PMP as well as UPnP
     */
    enabled?: boolean;
}
export interface NatManagerInit {
    /**
     * Whether to enable the NAT manager
     */
    enabled: boolean;
    /**
     * Pass a value to use instead of auto-detection
     */
    externalAddress?: string;
    /**
     * Pass a value to use instead of auto-detection
     */
    localAddress?: string;
    /**
     * A string value to use for the port mapping description on the gateway
     */
    description?: string;
    /**
     * How long UPnP port mappings should last for in seconds (minimum 1200)
     */
    ttl?: number;
    /**
     * Whether to automatically refresh UPnP port mappings when their TTL is reached
     */
    keepAlive: boolean;
    /**
     * Pass a value to use instead of auto-detection
     */
    gateway?: string;
}
export declare class NatManager implements Startable {
    private readonly components;
    private readonly enabled;
    private readonly externalAddress?;
    private readonly localAddress?;
    private readonly description;
    private readonly ttl;
    private readonly keepAlive;
    private readonly gateway?;
    private started;
    private client?;
    constructor(components: Components, init: NatManagerInit);
    isStarted(): boolean;
    start(): void;
    /**
     * Attempt to use uPnP to configure port mapping using the current gateway.
     *
     * Run after start to ensure the transport manager has all addresses configured.
     */
    afterStart(): void;
    _start(): Promise<void>;
    _getClient(): Promise<NatAPI>;
    /**
     * Stops the NAT manager
     */
    stop(): Promise<void>;
}
//# sourceMappingURL=nat-manager.d.ts.map