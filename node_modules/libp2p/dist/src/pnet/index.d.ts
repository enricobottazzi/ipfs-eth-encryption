import type { MultiaddrConnection } from '@libp2p/interfaces/transport';
import type { ConnectionProtector } from '@libp2p/interfaces/connection';
export { generateKey } from './key-generator.js';
export interface ProtectorInit {
    enabled?: boolean;
    psk: Uint8Array;
}
export declare class PreSharedKeyConnectionProtector implements ConnectionProtector {
    tag: string;
    private readonly psk;
    private readonly enabled;
    /**
     * Takes a Private Shared Key (psk) and provides a `protect` method
     * for wrapping existing connections in a private encryption stream.
     */
    constructor(init: ProtectorInit);
    /**
     * Takes a given Connection and creates a private encryption stream
     * between its two peers from the PSK the Protector instance was
     * created with.
     */
    protect(connection: MultiaddrConnection): Promise<MultiaddrConnection>;
}
//# sourceMappingURL=index.d.ts.map