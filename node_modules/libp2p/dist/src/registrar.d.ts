import { Topology } from '@libp2p/interfaces/topology';
import type { Registrar, StreamHandler } from '@libp2p/interfaces/registrar';
import type { PeerProtocolsChangeData } from '@libp2p/interfaces/peer-store';
import type { Connection } from '@libp2p/interfaces/connection';
import type { Components } from '@libp2p/interfaces/components';
/**
 * Responsible for notifying registered protocols of events in the network.
 */
export declare class DefaultRegistrar implements Registrar {
    private readonly topologies;
    private readonly handlers;
    private readonly components;
    constructor(components: Components);
    getProtocols(): string[];
    getHandler(protocol: string): StreamHandler;
    getTopologies(protocol: string): Topology[];
    /**
     * Registers the `handler` for each protocol
     */
    handle(protocols: string | string[], handler: StreamHandler): Promise<void>;
    /**
     * Removes the handler for each protocol. The protocol
     * will no longer be supported on streams.
     */
    unhandle(protocols: string | string[]): Promise<void>;
    /**
     * Register handlers for a set of multicodecs given
     */
    register(protocols: string | string[], topology: Topology): Promise<string>;
    /**
     * Unregister topology
     */
    unregister(id: string): void;
    /**
     * Remove a disconnected peer from the record
     */
    _onDisconnect(evt: CustomEvent<Connection>): void;
    /**
     * Check if a new peer support the multicodecs for this topology
     */
    _onProtocolChange(evt: CustomEvent<PeerProtocolsChangeData>): void;
}
//# sourceMappingURL=registrar.d.ts.map